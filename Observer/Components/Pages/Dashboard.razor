@page "/dashboard"
@using CoreUtility
@implements IDisposable
@attribute [StreamRendering]

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<p>Sensors statuses.</p>
<p>@errorText</p>

@if (updates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Time</th>
                <th>Sensor 1 (°C)</th>
                <th>Sensor 2 (°C)</th>
                <th>Sensor 3 (°C)</th>
                <th>Sensor 4 (°C)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var update in updates)
            {
                <tr>
                    <td>@update.TimeStamp.ToLocalTime()</td>
                    @if (update.SensorData == null) continue; 
                    @foreach (var sensorData in update.SensorData)
                    {
                        <td>@sensorData.Temperature</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public void Dispose()
    {

    }

    private List<SensorsStatus> updates = new List<SensorsStatus>();
    private string errorText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SensorsStatus? update;

        //set timer
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(10));

        while (await timer.WaitForNextTickAsync())
        {
            update = await GetUpdate();

            if (update != null)
            {
                updates.Add(update);
                StateHasChanged();
            }
        }
    }

    private async Task<SensorsStatus?> GetUpdate()
    {
        using (HttpClient client = new HttpClient())
        {
            try
            {
                string url = "https://localhost:7139/sensorsstatus";

                HttpResponseMessage response = await client.GetAsync(url);
                response.EnsureSuccessStatusCode();

                string responseData = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseData);

                var update = JsonConvert.DeserializeObject<SensorsStatus?>(responseData);
                Console.WriteLine("read");

                await InvokeAsync(StateHasChanged);
                return update;
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine($"Request error: {e.Message}");
                errorText = e.Message;
                await InvokeAsync(StateHasChanged);

                return null;
            }
        }
    }
}
