@page "/dashboard"
@using CoreUtility
@attribute [StreamRendering]

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<p>Sensors statuses.</p>

@if (updates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Time</th>
                <th>Sensor 1 (°C)</th>
                <th>Sensor 2 (°C)</th>
                <th>Sensor 3 (°C)</th>
                <th>Sensor 4 (°C)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var update in updates)
            {
                <tr>
                    <td>@update.TimeStamp.ToLocalTime()</td>
                    @if (update.SensorData == null) continue; //TODO: Show message data for this timeStamp unavailable
                    @foreach (var sensorData in update.SensorData)
                    {
                        <td>@sensorData.Temperature</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SensorsStatus> updates = new List<SensorsStatus>();
    private SensorsStatus? update;

    protected override async Task OnInitializedAsync()
    {
        using (HttpClient client = new HttpClient())
        {
            try
            {
                string url = "https://localhost:7139/sensorsstatus";

                HttpResponseMessage response = await client.GetAsync(url);
                response.EnsureSuccessStatusCode();

                string responseData = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseData);

                update = JsonConvert.DeserializeObject<SensorsStatus?>(responseData);

                if (update != null)
                {
                    updates.Add(update);
                }
                Console.WriteLine("read");
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine($"Request error: {e.Message}");
            }
        }
    }
}
